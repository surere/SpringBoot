<?xml version="1.0" encoding="UTF-8"?>
<!-- Mapper파일을 구성하기 위한 Doctype설정 -->
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<!-- 
	서비스 인터페이스를 namespace로 지정한다. 컨트롤러에서 해당 인터페이스를
	통해 Mapper의 메서드를 호출하게 된다. 
 -->

<mapper namespace="com.study.springboot.dao.ISimpleBbsDao">
	
	<!-- 
		네임스페이스로 지정된 인터페이스의 listDao()메서드를 통해
		해당 엘리먼트가 실행된다. 파라미터와 결과셋 모두 SimpleBbsDto객체를
		사용하고 있다. select 엘리먼트는 쿼리를 실행한 후 List컬렉션으로
		반환한다.
	 -->

	<select id="listDao" resultType="com.study.springboot.dto.SimpleBbsDto">
	<!-- listDo()의 select문 -->
		select * from simple_bbs order by id desc
	</select>
	
	<!-- 한개의 게시물 인출 -->
	<!-- 파라미터의 순서대로 접근하되 인덱스 0부터 시작한다. -->
	<select id="viewDao" resultType="com.study.springboot.dto.SimpleBbsDto">
	<!-- 1개이므로 파라미터가 있어야함. -->
		select * from simple_bbs where id =#{0}
	</select>
	
	<!-- 
		매개변수의 순서에 따라 param1부터 기술한다. 메서드는 
		insert(String writer, String title, String content)와 같이
		정의되어 있다.
	 -->
	<!-- 게시물 등록. DTO의 멤버변수명을 통해 저장된 값을 쿼리문에 적용한다. -->
	<insert id="writeDao">
	<!-- 결과값이 없으므로 리턴타입이 필요 없음. -->
		insert into simple_bbs (id, writer, title, content)
		values (simple_bbs_seq.nextval, #{param1}, #{param2}, #{param3})
		</insert>
		
		<!-- 
			@Param 어노테이션에서 진정한 이름을 인파라미터로 사용한다.
			deleteDao(@Param("_id")String id)이와 같이 정의 되어있다.
		 -->
		<!-- 게시물 삭제 -->
		<delete id="deleteDao">
		<!-- 이름을 사용하기 때문에 가독성이 좋다. -->
			delete from simple_bbs where id = #{_id}
		</delete> 
</mapper>